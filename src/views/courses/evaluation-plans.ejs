<%- include('../layouts/main', { 
    body: `
        <div class="container-fluid py-4">
            <!-- Header -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-1">
                                <i class="bi bi-clipboard-check me-2"></i>Planes de Evaluación
                            </h2>
                            <p class="text-muted mb-0">${course.name} - Grupo ${course.groupNumber} (${course.semester})</p>
                        </div>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item"><a href="/courses/search">Búsqueda de Cursos</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Planes de Evaluación</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>

            <!-- Información del Curso -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card bg-gradient-primary text-white">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <h4 class="card-title mb-2">${course.code} - ${course.name}</h4>
                                    <div class="row g-3">
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Semestre</small>
                                            <span class="fw-medium">${course.semester}</span>
                                        </div>
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Grupo</small>
                                            <span class="fw-medium">${course.groupNumber}</span>
                                        </div>
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Créditos</small>
                                            <span class="fw-medium">${course.credits}</span>
                                        </div>
                                        ${course.professor ? `
                                            <div class="col-md-3">
                                                <small class="text-white-50 d-block">Profesor</small>
                                                <span class="fw-medium">${course.professor.first_name} ${course.professor.last_name}</span>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <i class="bi bi-book-half" style="font-size: 4rem; opacity: 0.7;"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Planes de Evaluación Existentes -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-list-ul me-2"></i>Versiones de Planes de Evaluación
                                <span class="badge bg-secondary">${evaluationPlans.length}</span>
                            </h5>
                            <div class="d-flex gap-2">
                                ${evaluationPlans.length > 0 ? `
                                    <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createVersionModal">
                                        <i class="bi bi-plus-circle me-2"></i>Nueva Versión
                                    </button>
                                ` : ''}
                                ${['professor', 'coordinator', 'admin', 'student'].includes(user.role) ? `
                                    ${evaluationPlans.length === 0 ? `
                                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPlanModal">
                                            <i class="bi bi-plus-circle me-2"></i>Crear Plan Principal
                                        </button>
                                    ` : ''}
                                ` : ''}
                            </div>
                        </div>
                        <div class="card-body">
                            ${evaluationPlans.length > 0 ? `
                                <div class="alert alert-info mb-4">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <strong>Sistema de Versiones:</strong> Este curso tiene ${evaluationPlans.length} versión${evaluationPlans.length > 1 ? 'es' : ''} de planes de evaluación. 
                                    Puedes usar cualquiera o crear tu propia versión personalizada.
                                </div>
                                <div class="row g-4">
                                    ${evaluationPlans.map((plan, index) => `
                                        <div class="col-lg-6 col-xl-4">
                                            <div class="card h-100 border-0 shadow-sm ${plan.isMainVersion ? 'border-primary' : ''}">
                                                ${plan.isMainVersion ? `
                                                    <div class="card-header bg-primary text-white py-2">
                                                        <i class="bi bi-star-fill me-1"></i>
                                                        <small class="fw-medium">PLAN PRINCIPAL</small>
                                                    </div>
                                                ` : ''}
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                                        <div class="flex-grow-1">
                                                            <h6 class="card-title mb-1 fw-bold">${plan.versionName}</h6>
                                                            <small class="text-muted">
                                                                ${plan.activities.length} actividades • 
                                                                ${plan.usageCount} uso${plan.usageCount !== 1 ? 's' : ''}
                                                            </small>
                                                        </div>
                                                        <div class="text-end">
                                                            ${plan.isApproved ? `
                                                                <span class="badge bg-success">
                                                                    <i class="bi bi-check-circle me-1"></i>Aprobado
                                                                </span>
                                                            ` : `
                                                                <span class="badge bg-warning">
                                                                    <i class="bi bi-clock me-1"></i>Pendiente
                                                                </span>
                                                            `}
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="mb-3">
                                                        <small class="text-muted d-block mb-2">Actividades:</small>
                                                        ${plan.activities.slice(0, 3).map(activity => `
                                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                                <span class="small">${activity.name}</span>
                                                                <span class="badge bg-light text-dark">${activity.percentage}%</span>
                                                            </div>
                                                        `).join('')}
                                                        ${plan.activities.length > 3 ? `
                                                            <small class="text-muted">Y ${plan.activities.length - 3} más...</small>
                                                        ` : ''}
                                                    </div>
                                                    
                                                    <div class="row g-2 text-center mb-3">
                                                        <div class="col-6">
                                                            <small class="text-muted d-block">Creado</small>
                                                            <span class="fw-medium small">
                                                                ${new Date(plan.createdAt).toLocaleDateString('es-ES')}
                                                            </span>
                                                        </div>
                                                        <div class="col-6">
                                                            <small class="text-muted d-block">Popularidad</small>
                                                            <span class="fw-medium small">
                                                                ${plan.usageCount > 0 ? plan.usageCount + ' usos' : 'Sin uso'}
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="card-footer bg-transparent border-0 pt-0">
                                                    <div class="d-grid gap-2">
                                                        <div class="d-flex gap-2">
                                                            <a href="/evaluation-plans/${plan._id}" class="btn btn-outline-primary flex-fill">
                                                                <i class="bi bi-eye me-1"></i>Ver
                                                            </a>
                                                            <button data-plan-id="${plan._id}" class="btn btn-outline-secondary flex-fill copy-version-btn">
                                                                <i class="bi bi-copy me-1"></i>Copiar
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            ` : `
                                <div class="text-center py-5">
                                    <i class="bi bi-clipboard-x text-muted mb-3" style="font-size: 4rem;"></i>
                                    <h4 class="text-muted mb-3">No hay planes de evaluación</h4>
                                    <p class="text-muted mb-4">
                                        Aún no se han creado planes de evaluación para este curso.
                                    </p>
                                    ${['professor', 'coordinator', 'admin', 'student'].includes(user.role) ? `
                                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPlanModal">
                                            <i class="bi bi-plus-circle me-2"></i>Crear Primer Plan
                                        </button>
                                    ` : `
                                        <p class="text-muted">Contacta al profesor para crear un plan de evaluación.</p>
                                    `}
                                </div>
                            `}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `
}) %>

<!-- Modal para Crear Plan de Evaluación -->
<% if (['professor', 'coordinator', 'admin', 'student'].includes(user.role)) { %>
<div class="modal fade" id="createPlanModal" tabindex="-1" aria-labelledby="createPlanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPlanModalLabel">
                    <i class="bi bi-plus-circle me-2"></i>Crear Nuevo Plan de Evaluación
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createPlanForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Los porcentajes de todas las actividades deben sumar exactamente <strong>100%</strong>.
                    </div>
                    
                    <div id="activitiesContainer">
                        <div class="activity-item border rounded p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Actividad 1</h6>
                                <button type="button" class="btn btn-outline-danger btn-sm remove-activity" style="display: none;">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">Nombre de la Actividad *</label>
                                    <input type="text" class="form-control activity-name" placeholder="Ej: Parcial 1" required>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Porcentaje *</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control activity-percentage" min="0" max="100" step="0.1" required>
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Fecha de Entrega</label>
                                    <input type="date" class="form-control activity-date">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Descripción</label>
                                    <input type="text" class="form-control activity-description" placeholder="Descripción opcional">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button type="button" id="addActivity" class="btn btn-outline-primary">
                            <i class="bi bi-plus me-2"></i>Agregar Actividad
                        </button>
                        <div class="text-end">
                            <small class="text-muted">Total: </small>
                            <span id="totalPercentage" class="fw-bold text-primary">0%</span>
                        </div>
                    </div>
                    
                    <div id="percentageAlert" class="alert alert-warning" style="display: none;">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        El total de porcentajes debe ser exactamente 100%.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" id="createPlanBtn" class="btn btn-primary" disabled>
                        <i class="bi bi-save me-2"></i>Crear Plan de Evaluación
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
<% } %>

<!-- Modal para Crear Nueva Versión -->
<div class="modal fade" id="createVersionModal" tabindex="-1" aria-labelledby="createVersionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createVersionModalLabel">
                    <i class="bi bi-plus-circle me-2"></i>Crear Nueva Versión del Plan
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createVersionForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Crea tu propia versión del plan de evaluación. Los porcentajes deben sumar exactamente <strong>100%</strong>.
                    </div>
                    
                    <div class="mb-4">
                        <label for="versionName" class="form-label">Nombre de la Versión *</label>
                        <input type="text" class="form-control" id="versionName" 
                               placeholder="Ej: Plan con los cambios de abril, Versión de Juan, etc."
                               maxlength="100" required>
                        <div class="form-text">Dale un nombre descriptivo para que otros puedan identificarla fácilmente.</div>
                    </div>
                    
                    <div class="mb-4" id="basePlanSection">
                        <label for="basePlan" class="form-label">Partir desde</label>
                        <select class="form-select" id="basePlan">
                            <option value="">Empezar desde cero</option>
                            ${evaluationPlans.map(plan => `
                                <option value="${plan._id}">${plan.versionName} (${plan.activities.length} actividades)</option>
                            `).join('')}
                        </select>
                        <div class="form-text">Opcional: Selecciona un plan existente para copiar sus actividades como punto de partida.</div>
                    </div>

                    <hr class="my-4">
                    
                    <h6 class="mb-3">Actividades del Plan</h6>
                    
                    <div id="versionActivitiesContainer">
                        <div class="version-activity-item border rounded p-3 mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Actividad 1</h6>
                                <button type="button" class="btn btn-outline-danger btn-sm remove-version-activity" style="display: none;">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">Nombre de la Actividad *</label>
                                    <input type="text" class="form-control version-activity-name" placeholder="Ej: Parcial 1" required>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Porcentaje *</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control version-activity-percentage" min="0" max="100" step="0.1" required>
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Fecha de Entrega</label>
                                    <input type="date" class="form-control version-activity-date">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Descripción</label>
                                    <input type="text" class="form-control version-activity-description" placeholder="Descripción opcional">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button type="button" id="addVersionActivity" class="btn btn-outline-primary">
                            <i class="bi bi-plus me-2"></i>Agregar Actividad
                        </button>
                        <div class="text-end">
                            <small class="text-muted">Total: </small>
                            <span id="versionTotalPercentage" class="fw-bold text-primary">0%</span>
                        </div>
                    </div>
                    
                    <div id="versionPercentageAlert" class="alert alert-warning" style="display: none;">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        El total de porcentajes debe ser exactamente 100%.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" id="createVersionBtn" class="btn btn-primary" disabled>
                        <i class="bi bi-plus-circle me-2"></i>Crear Versión
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Scripts específicos para esta página -->
<script>
console.log('🚀 SCRIPT INICIADO - JavaScript se está ejecutando');

// Función básica de alerta para testing
window.testBasic = function() {
    alert('¡JavaScript funciona! El botón fue clickeado.');
    console.log('Test básico ejecutado');
};

// Verificar que Bootstrap está disponible
function checkBootstrap() {
    console.log('Verificando Bootstrap...');
    if (typeof bootstrap === 'undefined') {
        console.error('❌ Bootstrap no está cargado!');
        alert('Error: Bootstrap no está disponible. Recarga la página.');
        return false;
    }
    console.log('✅ Bootstrap está disponible');
    return true;
}

// Función de debugging mejorada
function debugLog(message, data = null) {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`[${timestamp}] 🔧 ${message}`, data || '');
}

// Test inmediato al cargar el script
console.log('🔍 Verificando estado inicial...');
console.log('- jQuery disponible:', typeof $ !== 'undefined');
console.log('- Bootstrap disponible:', typeof bootstrap !== 'undefined');
console.log('- Elementos del DOM:', {
    createVersionModal: !!document.getElementById('createVersionModal'),
    versionName: !!document.getElementById('versionName'),
    basePlan: !!document.getElementById('basePlan')
});

document.addEventListener('DOMContentLoaded', function() {
    console.log('📋 DOM CARGADO - Ejecutando inicialización');
    debugLog('DOM Content Loaded - Iniciando aplicación');
    
    // Verificar Bootstrap nuevamente
    if (!checkBootstrap()) {
        console.error('Bootstrap no disponible después de DOM load');
        return;
    }
    
    debugLog('Aplicación inicializada correctamente');
    
    // === EVENT LISTENERS SIN CSP VIOLATIONS ===
    
    // Event listener para botones de test
    document.addEventListener('click', function(e) {
        const action = e.target.closest('[data-action]')?.getAttribute('data-action');
        
        if (action === 'test-basic') {
            console.log('Test básico ejecutado');
            alert('¡JavaScript funciona! El botón fue clickeado.');
        } else if (action === 'test-direct') {
            console.log('Test directo ejecutado');
            alert('Test directo funciona!');
        } else if (action === 'test-modal') {
            console.log('Test modal ejecutado');
            window.testModal();
        } else if (action === 'view-existing-plan') {
            console.log('Ver plan existente ejecutado');
            // Función para ver el plan existente
            const modal = bootstrap.Modal.getInstance(document.getElementById('duplicatePlanModal'));
            if (modal) modal.hide();
            
            // Buscar el primer plan en la página y hacer scroll hacia él
            const firstPlan = document.querySelector('[href^="/evaluation-plans/"]');
            if (firstPlan) {
                firstPlan.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Agregar efecto de resaltado temporal
                const planCard = firstPlan.closest('.card');
                if (planCard) {
                    planCard.style.boxShadow = '0 0 0 3px rgba(13, 110, 253, 0.5)';
                    planCard.style.transition = 'box-shadow 0.3s ease';
                    
                    setTimeout(() => {
                        planCard.style.boxShadow = '';
                    }, 3000);
                }
            }
        }
    });
    
    // Event listener para botones de copiar versión
    document.addEventListener('click', function(e) {
        const copyBtn = e.target.closest('.copy-version-btn');
        if (copyBtn) {
            e.preventDefault();
            const planId = copyBtn.getAttribute('data-plan-id');
            console.log('Botón copiar clickeado - Plan ID:', planId);
            window.copyVersion(planId);
        }
    });
    
    console.log('✅ Event listeners configurados correctamente');
    
    let activityCount = 1;
    let versionActivityCount = 1;

    function addActivity() {
        activityCount++;
        const container = document.getElementById('activitiesContainer');
        const activityHtml = `
            <div class="activity-item border rounded p-3 mb-3">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Actividad ${activityCount}</h6>
                    <button type="button" class="btn btn-outline-danger btn-sm remove-activity">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Nombre de la Actividad *</label>
                        <input type="text" class="form-control activity-name" placeholder="Ej: Parcial ${activityCount}" required>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Porcentaje *</label>
                        <div class="input-group">
                            <input type="number" class="form-control activity-percentage" min="0" max="100" step="0.1" required>
                            <span class="input-group-text">%</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Fecha de Entrega</label>
                        <input type="date" class="form-control activity-date">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Descripción</label>
                        <input type="text" class="form-control activity-description" placeholder="Descripción opcional">
                    </div>
                </div>
            </div>
        `;
        container.insertAdjacentHTML('beforeend', activityHtml);
        updateTotalPercentage();
        
        // Mostrar botones de eliminar si hay más de una actividad
        const removeButtons = container.querySelectorAll('.remove-activity');
        removeButtons.forEach(btn => btn.style.display = removeButtons.length > 1 ? 'block' : 'none');
    }

    function addVersionActivity() {
        versionActivityCount++;
        const container = document.getElementById('versionActivitiesContainer');
        const activityHtml = `
            <div class="version-activity-item border rounded p-3 mb-3">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Actividad ${versionActivityCount}</h6>
                    <button type="button" class="btn btn-outline-danger btn-sm remove-version-activity">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Nombre de la Actividad *</label>
                        <input type="text" class="form-control version-activity-name" placeholder="Ej: Parcial ${versionActivityCount}" required>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Porcentaje *</label>
                        <div class="input-group">
                            <input type="number" class="form-control version-activity-percentage" min="0" max="100" step="0.1" required>
                            <span class="input-group-text">%</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Fecha de Entrega</label>
                        <input type="date" class="form-control version-activity-date">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Descripción</label>
                        <input type="text" class="form-control version-activity-description" placeholder="Descripción opcional">
                    </div>
                </div>
            </div>
        `;
        container.insertAdjacentHTML('beforeend', activityHtml);
        updateVersionTotalPercentage();
        
        // Mostrar botones de eliminar si hay más de una actividad
        const removeButtons = container.querySelectorAll('.remove-version-activity');
        removeButtons.forEach(btn => btn.style.display = removeButtons.length > 1 ? 'block' : 'none');
    }

    function removeActivity(button) {
        const container = document.getElementById('activitiesContainer');
        const activityItem = button.closest('.activity-item');
        const activityItems = container.querySelectorAll('.activity-item');
        
        if (activityItems.length > 1) {
            activityItem.remove();
        updateTotalPercentage();
            
            // Ocultar botones de eliminar si solo queda una actividad
            const remainingItems = container.querySelectorAll('.activity-item');
            const removeButtons = container.querySelectorAll('.remove-activity');
            removeButtons.forEach(btn => btn.style.display = remainingItems.length > 1 ? 'block' : 'none');
        }
    }

    function removeVersionActivity(button) {
        const container = document.getElementById('versionActivitiesContainer');
        const activityItem = button.closest('.version-activity-item');
        const activityItems = container.querySelectorAll('.version-activity-item');
        
        if (activityItems.length > 1) {
            activityItem.remove();
            updateVersionTotalPercentage();
            
            // Ocultar botones de eliminar si solo queda una actividad
            const remainingItems = container.querySelectorAll('.version-activity-item');
            const removeButtons = container.querySelectorAll('.remove-version-activity');
            removeButtons.forEach(btn => btn.style.display = remainingItems.length > 1 ? 'block' : 'none');
        }
    }

    function updateTotalPercentage() {
        const percentageInputs = document.querySelectorAll('.activity-percentage');
        let total = 0;
        
        percentageInputs.forEach(input => {
            const value = parseFloat(input.value) || 0;
            total += value;
        });
        
        const totalElement = document.getElementById('totalPercentage');
        const alertElement = document.getElementById('percentageAlert');
        const submitButton = document.getElementById('createPlanBtn');
        
        if (totalElement) totalElement.textContent = total.toFixed(1) + '%';
        
        // Validar porcentaje total
        const isValid = Math.abs(total - 100) < 0.01;
        
        if (alertElement) {
            alertElement.style.display = total > 0 && !isValid ? 'block' : 'none';
        }
        
        if (submitButton) {
            submitButton.disabled = !isValid || total === 0;
        }
    }

    function updateVersionTotalPercentage() {
        const percentageInputs = document.querySelectorAll('.version-activity-percentage');
        let total = 0;
        
        percentageInputs.forEach(input => {
            const value = parseFloat(input.value) || 0;
            total += value;
        });
        
        const totalElement = document.getElementById('versionTotalPercentage');
        const alertElement = document.getElementById('versionPercentageAlert');
        const submitButton = document.getElementById('createVersionBtn');
        
        if (totalElement) totalElement.textContent = total.toFixed(1) + '%';
        
        // Validar porcentaje total
        const isValid = Math.abs(total - 100) < 0.01;
        
        if (alertElement) {
            alertElement.style.display = total > 0 && !isValid ? 'block' : 'none';
        }
        
        if (submitButton) {
            submitButton.disabled = !isValid || total === 0;
        }
    }

    // Función para cargar actividades de un plan base
    function loadBasePlanActivities(planId) {
        if (!planId) {
            // Limpiar y resetear a actividad por defecto
            const container = document.getElementById('versionActivitiesContainer');
            container.innerHTML = `
                <div class="version-activity-item border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Actividad 1</h6>
                        <button type="button" class="btn btn-outline-danger btn-sm remove-version-activity" style="display: none;">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Nombre de la Actividad *</label>
                            <input type="text" class="form-control version-activity-name" placeholder="Ej: Parcial 1" required>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Porcentaje *</label>
                            <div class="input-group">
                                <input type="number" class="form-control version-activity-percentage" min="0" max="100" step="0.1" required>
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Fecha de Entrega</label>
                            <input type="date" class="form-control version-activity-date">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Descripción</label>
                            <input type="text" class="form-control version-activity-description" placeholder="Descripción opcional">
                        </div>
                    </div>
                </div>
            `;
            versionActivityCount = 1;
            updateVersionTotalPercentage();
            return;
        }

        // Obtener datos del plan
        fetch(`/api/evaluation-plans/${planId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.plan.activities.length > 0) {
                    const container = document.getElementById('versionActivitiesContainer');
                    container.innerHTML = '';
                    versionActivityCount = 0;

                    data.plan.activities.forEach((activity, index) => {
                        versionActivityCount++;
                        const activityHtml = `
                            <div class="version-activity-item border rounded p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h6 class="mb-0">Actividad ${index + 1}</h6>
                                    <button type="button" class="btn btn-outline-danger btn-sm remove-version-activity" style="display: ${data.plan.activities.length > 1 ? 'block' : 'none'};">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label class="form-label">Nombre de la Actividad *</label>
                                        <input type="text" class="form-control version-activity-name" placeholder="Ej: Parcial ${index + 1}" value="${activity.name || ''}" required>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Porcentaje *</label>
                                        <div class="input-group">
                                            <input type="number" class="form-control version-activity-percentage" min="0" max="100" step="0.1" value="${activity.percentage || ''}" required>
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Fecha de Entrega</label>
                                        <input type="date" class="form-control version-activity-date" value="${activity.dueDate ? activity.dueDate.split('T')[0] : ''}">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Descripción</label>
                                        <input type="text" class="form-control version-activity-description" placeholder="Descripción opcional" value="${activity.description || ''}">
                                    </div>
                                </div>
                            </div>
                        `;
                        container.insertAdjacentHTML('beforeend', activityHtml);
                    });
                    
                    updateVersionTotalPercentage();
                } else {
                    showToast('Error al cargar las actividades del plan base', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error al cargar datos del plan', 'error');
            });
    }

    function useThisPlan(planId) {
        console.log('Usando plan:', planId);
        
        if (!planId) {
            showToast('Error: ID de plan no válido', 'error');
            return;
        }
        
        // Incrementar contador de uso
        fetch(`/api/evaluation-plans/${planId}/use`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
            console.log('Respuesta de incremento de uso:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Datos de incremento:', data);
        })
        .catch(error => {
            console.error('Error incrementando uso:', error);
            // Continuar aunque falle el incremento
        });
        
        // Redirigir a la calculadora
        console.log('Redirigiendo a calculadora...');
        window.location.href = `/evaluation-plans/${planId}/calculator`;
    }
    
    // Función de test para verificar que el modal funciona (GLOBAL)
    window.testModal = function() {
        console.log('=== TESTING MODAL ===');
        const modalElement = document.getElementById('createVersionModal');
        
        if (!modalElement) {
            console.log('❌ Modal element no encontrado');
            alert('Error: Modal no encontrado');
            return;
        }
        
        if (!checkBootstrap()) {
            alert('Bootstrap no está disponible');
            return;
        }
        
        try {
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            console.log('✅ Test modal exitoso');
            alert('Modal de test abierto correctamente');
        } catch (error) {
            console.log('❌ Error en test modal', error);
            alert('Error en test modal: ' + error.message);
        }
    };

    // Función copyVersion (GLOBAL)
    window.copyVersion = function(planId) {
        console.log('=== INICIANDO COPY VERSION ===');
        console.log('Plan ID recibido:', planId, 'tipo:', typeof planId);
        
        if (!planId) {
            console.log('❌ Plan ID es null o undefined');
            alert('Error: ID de plan no válido');
            return;
        }
        
        console.log('Iniciando fetch para obtener datos del plan');
        
        // Obtener datos del plan a copiar
        fetch(`/api/evaluation-plans/${planId}`)
            .then(response => {
                console.log('Respuesta recibida - Status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return response.json();
            })
            .then(data => {
                console.log('Datos del plan obtenidos:', data);
                
                if (data.success) {
                    console.log('✅ Plan encontrado exitosamente:', data.plan.versionName);
                    
                    // Verificar que existen los elementos del DOM
                    const versionNameInput = document.getElementById('versionName');
                    const basePlanSelect = document.getElementById('basePlan');
                    const modalElement = document.getElementById('createVersionModal');
                    
                    console.log('Elementos del DOM:', {
                        versionNameInput: !!versionNameInput,
                        basePlanSelect: !!basePlanSelect,
                        modalElement: !!modalElement
                    });
                    
                    if (!versionNameInput || !basePlanSelect || !modalElement) {
                        console.log('❌ Elementos del modal no encontrados en el DOM');
                        alert('Error: Modal no encontrado en la página');
                        return;
                    }
                    
                    // Prellenar el modal con datos del plan
                    const newVersionName = `Copia de ${data.plan.versionName}`;
                    versionNameInput.value = newVersionName;
                    basePlanSelect.value = planId;
                    
                    console.log('✅ Campos prellenados:', { 
                        versionName: newVersionName, 
                        basePlan: planId 
                    });
                    
                    // Ocultar la sección "Partir desde" ya que estamos copiando un plan específico
                    const basePlanSection = document.getElementById('basePlanSection');
                    if (basePlanSection) {
                        basePlanSection.style.display = 'none';
                        console.log('✅ Sección "Partir desde" ocultada');
                    }
                    
                    // Cargar las actividades del plan base
                    loadBasePlanActivities(planId);
                    console.log('✅ Cargando actividades del plan base');
                    
                    // Mostrar modal
                    console.log('Intentando mostrar modal...');
                    try {
                        if (!checkBootstrap()) {
                            throw new Error('Bootstrap no está disponible');
                        }
                        
                        const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                        console.log('✅ Modal mostrado exitosamente');
                        
                    } catch (modalError) {
                        console.log('❌ Error al mostrar modal:', modalError);
                        alert('Error al abrir el modal: ' + modalError.message);
                    }
                } else {
                    console.log('❌ Error en respuesta del servidor:', data.message);
                    alert('Error al obtener datos del plan: ' + (data.message || 'Error desconocido'));
                }
            })
            .catch(error => {
                console.log('❌ Error completo en copyVersion:', error);
                alert('Error al copiar la versión: ' + error.message);
            });
        
        console.log('=== FIN COPY VERSION ===');
    };

    // Inicializar modal de versión cuando se abra
    const createVersionModal = document.getElementById('createVersionModal');
    if (createVersionModal) {
        createVersionModal.addEventListener('shown.bs.modal', function() {
            // Asegurar que hay al menos una actividad y que el selector de plan base funciona
            const basePlanValue = document.getElementById('basePlan').value;
            if (!basePlanValue) {
                // Si no hay plan base seleccionado, asegurar que hay una actividad por defecto
                const container = document.getElementById('versionActivitiesContainer');
                if (container.children.length === 0) {
                    versionActivityCount = 0;
                    addVersionActivity();
                }
            }
            updateVersionTotalPercentage();
        });

        // Limpiar modal cuando se cierre
        createVersionModal.addEventListener('hidden.bs.modal', function() {
            // Resetear formulario
            document.getElementById('versionName').value = '';
            document.getElementById('basePlan').value = '';
            
            // Restaurar la visibilidad de la sección "Partir desde"
            const basePlanSection = document.getElementById('basePlanSection');
            if (basePlanSection) {
                basePlanSection.style.display = 'block';
                console.log('✅ Sección "Partir desde" restaurada');
            }
            
            // Resetear actividades a una por defecto
            const container = document.getElementById('versionActivitiesContainer');
            container.innerHTML = `
                <div class="version-activity-item border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Actividad 1</h6>
                        <button type="button" class="btn btn-outline-danger btn-sm remove-version-activity" style="display: none;">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Nombre de la Actividad *</label>
                            <input type="text" class="form-control version-activity-name" placeholder="Ej: Parcial 1" required>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Porcentaje *</label>
                            <div class="input-group">
                                <input type="number" class="form-control version-activity-percentage" min="0" max="100" step="0.1" required>
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Fecha de Entrega</label>
                            <input type="date" class="form-control version-activity-date">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Descripción</label>
                            <input type="text" class="form-control version-activity-description" placeholder="Descripción opcional">
                        </div>
                    </div>
                </div>
            `;
            versionActivityCount = 1;
            updateVersionTotalPercentage();
        });
    }

    // Función auxiliar para mostrar toasts
    function showToast(message, type = 'info') {
        console.log('Mostrando toast:', { message, type });
        
        // Remover toasts anteriores
        const existingToasts = document.querySelectorAll('.toast-container');
        existingToasts.forEach(toast => toast.remove());
        
        const toastHtml = `
            <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11000;">
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
                    <div class="toast-header ${type === 'success' ? 'bg-success text-white' : type === 'error' ? 'bg-danger text-white' : 'bg-info text-white'}">
                        <strong class="me-auto">
                            ${type === 'success' ? '✅ Éxito' : type === 'error' ? '❌ Error' : 'ℹ️ Información'}
                        </strong>
                        <button type="button" class="btn-close ${type === 'error' || type === 'success' ? 'btn-close-white' : ''}" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', toastHtml);
        console.log('Toast agregado al DOM');
        
        // Auto-remover después de 8 segundos para errores, 5 para éxito
        setTimeout(() => {
            const toastElement = document.querySelector('.toast-container:last-child');
            if (toastElement) {
                toastElement.remove();
                console.log('Toast removido automáticamente');
            }
        }, type === 'error' ? 8000 : 5000);
    }
    
    // Función para mostrar modal cuando ya existe un plan
    function showDuplicatePlanModal(message) {
        const modalHtml = `
            <div class="modal fade" id="duplicatePlanModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-dark">
                            <h5 class="modal-title">
                                <i class="bi bi-exclamation-triangle me-2"></i>Plan Existente
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle me-2"></i>
                                ${message}
                            </div>
                            <p class="mb-3">
                                <strong>¿Qué te gustaría hacer?</strong>
                            </p>
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-primary" data-action="view-existing-plan">
                                    <i class="bi bi-eye me-2"></i>Ver Plan Existente
                                </button>
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                    <i class="bi bi-x-circle me-2"></i>Cancelar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Remover modal anterior si existe
        const existingModal = document.getElementById('duplicatePlanModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        const modal = new bootstrap.Modal(document.getElementById('duplicatePlanModal'));
        modal.show();
        
        // Limpiar modal al cerrarse
        document.getElementById('duplicatePlanModal').addEventListener('hidden.bs.modal', function() {
            this.remove();
        });
    }

    // Event Listeners
    const addActivityBtn = document.getElementById('addActivity');
    if (addActivityBtn) {
        addActivityBtn.addEventListener('click', addActivity);
    }

    const addVersionActivityBtn = document.getElementById('addVersionActivity');
    if (addVersionActivityBtn) {
        addVersionActivityBtn.addEventListener('click', addVersionActivity);
    }
    
    // Remover actividad
    document.addEventListener('click', function(e) {
        if (e.target.closest('.remove-activity')) {
            removeActivity(e.target.closest('.remove-activity'));
        }
        if (e.target.closest('.remove-version-activity')) {
            removeVersionActivity(e.target.closest('.remove-version-activity'));
        }
    });
    
    // Actualizar porcentajes
    document.addEventListener('input', function(e) {
        if (e.target.classList.contains('activity-percentage')) {
            updateTotalPercentage();
        }
        if (e.target.classList.contains('version-activity-percentage')) {
            updateVersionTotalPercentage();
        }
    });

    // Listener para cambio en el selector de plan base
    const basePlanSelect = document.getElementById('basePlan');
    if (basePlanSelect) {
        basePlanSelect.addEventListener('change', function(e) {
            loadBasePlanActivities(e.target.value);
        });
    }
    
    // Enviar formulario
    const createPlanForm = document.getElementById('createPlanForm');
    if (createPlanForm) {
        createPlanForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const activities = [];
            const activityItems = document.querySelectorAll('.activity-item');
            
            activityItems.forEach(item => {
                const name = item.querySelector('.activity-name').value;
                const percentage = parseFloat(item.querySelector('.activity-percentage').value);
                const date = item.querySelector('.activity-date').value;
                const description = item.querySelector('.activity-description').value;
                
                if (name && percentage) {
                    activities.push({
                        name,
                        percentage,
                        dueDate: date || null,
                        description
                    });
                }
            });
            
            if (activities.length === 0) {
                showToast('Debes agregar al menos una actividad', 'error');
                return;
            }
            
            try {
                // Obtener información del curso desde la URL o página
                const pathParts = window.location.pathname.split('/');
                const courseCode = pathParts[2];
                const semester = pathParts[3];  
                const groupNumber = pathParts[4];
                
                const response = await fetch(`/courses/${courseCode}/${semester}/${groupNumber}/evaluation-plans`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ activities })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('Plan de evaluación creado exitosamente', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    // Cerrar el modal de creación
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createPlanModal'));
                    if (modal) modal.hide();
                    
                    // Si es error de plan duplicado, mostrar modal especial
                    if (response.status === 409) {
                        showDuplicatePlanModal(result.message);
                    } else {
                        showToast(result.message || 'Error al crear el plan', 'error');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error al crear el plan de evaluación', 'error');
            }
        });
    }

    // Enviar formulario de nueva versión
    const createVersionForm = document.getElementById('createVersionForm');
    if (createVersionForm) {
        createVersionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const versionName = document.getElementById('versionName').value.trim();
            
            if (!versionName) {
                showToast('El nombre de la versión es requerido', 'error');
                return;
            }

            // Recoger actividades del formulario
            const activities = [];
            const activityItems = document.querySelectorAll('.version-activity-item');
            
            activityItems.forEach(item => {
                const name = item.querySelector('.version-activity-name').value;
                const percentage = parseFloat(item.querySelector('.version-activity-percentage').value);
                const date = item.querySelector('.version-activity-date').value;
                const description = item.querySelector('.version-activity-description').value;
                
                if (name && percentage) {
                    activities.push({
                        name,
                        percentage,
                        dueDate: date || null,
                        description
                    });
                }
            });

            if (activities.length === 0) {
                showToast('Debes agregar al menos una actividad', 'error');
                return;
            }

            // Validar que los porcentajes sumen 100%
            const totalPercentage = activities.reduce((sum, activity) => sum + activity.percentage, 0);
            if (Math.abs(totalPercentage - 100) > 0.01) {
                showToast('Los porcentajes deben sumar exactamente 100%', 'error');
                return;
            }
            
            try {
                const pathParts = window.location.pathname.split('/');
                const courseCode = pathParts[2];
                const semester = pathParts[3];  
                const groupNumber = pathParts[4];
                
                const response = await fetch(`/courses/${courseCode}/${semester}/${groupNumber}/evaluation-plans/version`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        versionName,
                        activities
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('Versión creada exitosamente', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Error al crear la versión', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error al crear la versión', 'error');
            }
        });
    }

    // Función global para usar planes
    window.useThisPlan = useThisPlan;
    window.copyVersion = copyVersion;
    
    // Inicializar tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

<!-- CSS adicional -->
<style>
.modal {
    z-index: 1050 !important;
}

.modal-backdrop {
    z-index: 1040 !important;
}

.toast-container {
    z-index: 1060 !important;
}
</style> 