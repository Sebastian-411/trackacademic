<%- include('../layouts/main', { 
    body: `
        <div class="container-fluid py-4">
            <!-- Header -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-1">
                                <i class="bi bi-calculator me-2"></i>Calculadora de Notas
                            </h2>
                            <p class="text-muted mb-0">${plan.subjectCode} - ${subjectName}</p>
                        </div>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-0">
                                <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item"><a href="/courses/search">Búsqueda de Cursos</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Calculadora</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>

            <!-- Información del Plan -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card bg-gradient-success text-white">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <h4 class="card-title mb-3">
                                        ${plan.subjectCode} - Grupo ${plan.groupNumber}
                                        <span class="badge bg-white text-success ms-2">
                                            <i class="bi bi-check-circle me-1"></i>Activo
                                        </span>
                                    </h4>
                                    <h5 class="fw-bold mb-3 text-white-75">${plan.versionName}</h5>
                                    <div class="row g-3">
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Semestre</small>
                                            <span class="fw-medium">${plan.semester}</span>
                                        </div>
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Actividades</small>
                                            <span class="fw-medium">${plan.activities.length}</span>
                                        </div>
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Progreso</small>
                                            <span class="fw-medium">${studentGrade ? studentGrade.progress : 0}%</span>
                                        </div>
                                        <div class="col-md-3">
                                            <small class="text-white-50 d-block">Nota Actual</small>
                                            <span class="fw-medium" id="currentGradeDisplay">${studentGrade ? studentGrade.currentGrade.toFixed(2) : '0.00'}</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <i class="bi bi-calculator" style="font-size: 4rem; opacity: 0.7;"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Calculadora de Notas -->
                <div class="col-lg-8 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-list-check me-2"></i>Mis Notas
                            </h5>
                            <div class="d-flex align-items-center gap-3">
                                <small class="text-muted">
                                    Progreso: <span id="progressDisplay" class="fw-bold text-primary">${studentGrade ? studentGrade.progress : 0}%</span>
                                </small>
                                <button onclick="clearAllGrades()" class="btn btn-outline-warning btn-sm">
                                    <i class="bi bi-arrow-clockwise me-1"></i>Limpiar Todo
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            ${studentGrade ? `
                                <div class="alert alert-info mb-4">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <strong>Tus notas se guardan automáticamente.</strong> 
                                    Puedes cerrar esta página y volver cuando quieras - tus datos estarán aquí.
                                </div>
                            ` : `
                                <div class="alert alert-warning mb-4">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    <strong>Inicia ingresando tu primera nota</strong> para comenzar a usar la calculadora.
                                </div>
                            `}
                            
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 35%">Actividad</th>
                                            <th class="text-center" style="width: 15%">Peso</th>
                                            <th class="text-center" style="width: 20%">Mi Nota</th>
                                            <th class="text-center" style="width: 15%">Contribución</th>
                                            <th class="text-center" style="width: 15%">Acción</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${plan.activities.map((activity, index) => {
                                            const userActivity = studentGrade ? 
                                                studentGrade.activities.find(a => a.name === activity.name) : null;
                                            const score = userActivity ? userActivity.score : null;
                                            const contribution = score ? (score * activity.percentage / 100).toFixed(2) : '0.00';
                                            
                                            return `
                                                <tr data-activity-name="${activity.name}">
                                                    <td>
                                                        <div>
                                                            <div class="fw-medium">${activity.name}</div>
                                                            ${activity.description ? 
                                                                `<small class="text-muted">${activity.description}</small>` : ''
                                                            }
                                                        </div>
                                                    </td>
                                                    <td class="text-center">
                                                        <span class="badge bg-light text-dark fw-medium">${activity.percentage}%</span>
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="input-group input-group-sm" style="max-width: 120px; margin: 0 auto;">
                                                            <input type="number" 
                                                                   class="form-control text-center grade-input" 
                                                                   data-activity-name="${activity.name}"
                                                                   min="0" 
                                                                   max="5" 
                                                                   step="0.1" 
                                                                   placeholder="0.0"
                                                                   value="${score !== null ? score : ''}"
                                                                   onchange="saveGrade('${activity.name}', this.value)">
                                                            <span class="input-group-text">/5.0</span>
                                                        </div>
                                                    </td>
                                                    <td class="text-center">
                                                        <span class="contribution fw-medium text-primary" data-activity-name="${activity.name}">
                                                            ${contribution}
                                                        </span>
                                                    </td>
                                                    <td class="text-center">
                                                        ${score !== null ? `
                                                            <button onclick="clearGrade('${activity.name}')" class="btn btn-outline-danger btn-sm">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        ` : `
                                                            <span class="text-muted">-</span>
                                                        `}
                                                    </td>
                                                </tr>
                                            `;
                                        }).join('')}
                                    </tbody>
                                    <tfoot class="table-light">
                                        <tr>
                                            <th colspan="3" class="text-end">Nota Final Actual:</th>
                                            <th class="text-center">
                                                <span id="finalGrade" class="fw-bold text-success fs-5">
                                                    ${studentGrade ? studentGrade.currentGrade.toFixed(2) : '0.00'}
                                                </span>
                                            </th>
                                            <th class="text-center">
                                                <span class="badge ${studentGrade && studentGrade.currentGrade >= 3.0 ? 'bg-success' : 'bg-danger'}">
                                                    ${studentGrade && studentGrade.currentGrade >= 3.0 ? 'APROBADO' : 'REPROBADO'}
                                                </span>
                                            </th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Calculadora de Notas Mínimas -->
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-target me-2"></i>Calculadora de Metas
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="targetGrade" class="form-label">Nota Objetivo</label>
                                <select id="targetGrade" class="form-select">
                                    <option value="3.0">3.0 (Aprobación)</option>
                                    <option value="3.5">3.5</option>
                                    <option value="4.0">4.0</option>
                                    <option value="4.5">4.5</option>
                                    <option value="5.0">5.0 (Excelencia)</option>
                                </select>
                            </div>
                            
                            <button onclick="calculateMinimumGrades()" class="btn btn-primary w-100 mb-3">
                                <i class="bi bi-calculator me-2"></i>Calcular Notas Necesarias
                            </button>
                            
                            <div id="calculationResults" class="alert alert-info" style="display: none;">
                                <h6 class="alert-heading mb-2">
                                    <i class="bi bi-lightbulb me-2"></i>Resultados
                                </h6>
                                <div id="minimumGradesTable"></div>
                            </div>
                            
                            <div class="mt-3">
                                <h6 class="mb-2">Estadísticas</h6>
                                <div class="small">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Actividades Completadas:</span>
                                        <span class="fw-medium" id="completedCount">
                                            ${studentGrade ? studentGrade.metadata?.completedActivities || 0 : 0}/${plan.activities.length}
                                        </span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>Promedio Actual:</span>
                                        <span class="fw-medium" id="currentAvg">
                                            ${studentGrade ? studentGrade.currentGrade.toFixed(2) : '0.00'}
                                        </span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Estado:</span>
                                        <span class="fw-medium ${studentGrade && studentGrade.currentGrade >= 3.0 ? 'text-success' : 'text-danger'}" id="status">
                                            ${studentGrade && studentGrade.currentGrade >= 3.0 ? 'Aprobando' : 'En Riesgo'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tips de Estudio -->
                    <div class="card shadow-sm mt-3">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-lightbulb me-2"></i>Tips de Estudio
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="small text-muted">
                                <p class="mb-2">💡 <strong>Mantén tus notas actualizadas</strong> para proyecciones precisas</p>
                                <p class="mb-2">📚 <strong>Prioriza actividades</strong> con mayor peso porcentual</p>
                                <p class="mb-0">🎯 <strong>Revisa regularmente</strong> tu progreso hacia la meta</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const studentGradeId = '${studentGrade ? studentGrade._id : ''}';
            const planActivities = ${JSON.stringify(plan.activities)};

            async function saveGrade(activityName, score) {
                if (!score || score === '') {
                    clearGrade(activityName);
                    return;
                }
                
                const parsedScore = parseFloat(score);
                if (isNaN(parsedScore) || parsedScore < 0 || parsedScore > 5) {
                    showToast('La nota debe estar entre 0.0 y 5.0', 'error');
                    return;
                }
                
                try {
                    const response = await fetch(\`/api/calculator/\${studentGradeId}/activity/\${encodeURIComponent(activityName)}\`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ score: parsedScore })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        updateDisplay(result);
                        showToast('Nota guardada automáticamente', 'success');
                    } else {
                        showToast(result.message || 'Error al guardar', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error al conectar con el servidor', 'error');
                }
            }
            
            async function clearGrade(activityName) {
                // Buscar el input y limpiarlo
                const input = document.querySelector(\`input[data-activity-name="\${activityName}"]\`);
                if (input) {
                    input.value = '';
                }
                
                // Actualizar la contribución
                const contributionSpan = document.querySelector(\`span[data-activity-name="\${activityName}"]\`);
                if (contributionSpan) {
                    contributionSpan.textContent = '0.00';
                }
                
                // Recalcular totales
                updateTotals();
                
                showToast('Nota eliminada', 'info');
            }
            
            async function clearAllGrades() {
                if (confirm('¿Estás seguro de que quieres limpiar todas las notas?')) {
                    const inputs = document.querySelectorAll('.grade-input');
                    inputs.forEach(input => {
                        input.value = '';
                    });
                    
                    const contributions = document.querySelectorAll('.contribution');
                    contributions.forEach(span => {
                        span.textContent = '0.00';
                    });
                    
                    updateTotals();
                    showToast('Todas las notas han sido eliminadas', 'info');
                }
            }
            
            function updateDisplay(result) {
                // Actualizar displays
                document.getElementById('currentGradeDisplay').textContent = result.currentGrade.toFixed(2);
                document.getElementById('finalGrade').textContent = result.currentGrade.toFixed(2);
                document.getElementById('progressDisplay').textContent = result.progress + '%';
                document.getElementById('currentAvg').textContent = result.currentGrade.toFixed(2);
                
                // Actualizar contribución de la actividad
                updateTotals();
                
                // Actualizar estado
                const statusElement = document.getElementById('status');
                const badgeElement = document.querySelector('.badge');
                if (result.currentGrade >= 3.0) {
                    statusElement.textContent = 'Aprobando';
                    statusElement.className = 'fw-medium text-success';
                    badgeElement.textContent = 'APROBADO';
                    badgeElement.className = 'badge bg-success';
                } else {
                    statusElement.textContent = 'En Riesgo';
                    statusElement.className = 'fw-medium text-danger';
                    badgeElement.textContent = 'REPROBADO';
                    badgeElement.className = 'badge bg-danger';
                }
            }
            
            function updateTotals() {
                let totalContribution = 0;
                let completedActivities = 0;
                
                planActivities.forEach(activity => {
                    const input = document.querySelector(\`input[data-activity-name="\${activity.name}"]\`);
                    const contributionSpan = document.querySelector(\`.contribution[data-activity-name="\${activity.name}"]\`);
                    
                    const score = parseFloat(input.value) || 0;
                    const contribution = score * activity.percentage / 100;
                    
                    contributionSpan.textContent = contribution.toFixed(2);
                    totalContribution += contribution;
                    
                    if (score > 0) completedActivities++;
                });
                
                document.getElementById('finalGrade').textContent = totalContribution.toFixed(2);
                document.getElementById('completedCount').textContent = \`\${completedActivities}/\${planActivities.length}\`;
            }
            
            function calculateMinimumGrades() {
                const targetGrade = parseFloat(document.getElementById('targetGrade').value);
                const resultsDiv = document.getElementById('calculationResults');
                const tableDiv = document.getElementById('minimumGradesTable');
                
                let currentContribution = 0;
                let remainingPercentage = 0;
                const pendingActivities = [];
                
                planActivities.forEach(activity => {
                    const input = document.querySelector(\`input[data-activity-name="\${activity.name}"]\`);
                    const score = parseFloat(input.value);
                    
                    if (score && score > 0) {
                        currentContribution += (score * activity.percentage) / 100;
                    } else {
                        remainingPercentage += activity.percentage;
                        pendingActivities.push(activity);
                    }
                });
                
                if (pendingActivities.length === 0) {
                    tableDiv.innerHTML = '<p class="mb-0">Todas las actividades tienen nota asignada.</p>';
                    resultsDiv.style.display = 'block';
                    return;
                }
                
                const neededContribution = targetGrade - currentContribution;
                const requiredAverage = (neededContribution * 100) / remainingPercentage;
                
                let tableHTML = '<div class="table-responsive"><table class="table table-sm">';
                tableHTML += '<thead><tr><th>Actividad</th><th class="text-center">Nota Mínima</th></tr></thead><tbody>';
                
                pendingActivities.forEach(activity => {
                    const minGrade = Math.max(0, requiredAverage);
                    const status = minGrade <= 5.0 ? 'text-success' : 'text-danger';
                    
                    tableHTML += \`
                        <tr>
                            <td>\${activity.name} (\${activity.percentage}%)</td>
                            <td class="text-center \${status}">\${minGrade.toFixed(2)}</td>
                        </tr>
                    \`;
                });
                
                tableHTML += '</tbody></table></div>';
                tableHTML += \`<div class="mt-2"><strong>Promedio requerido: <span class="text-primary">\${requiredAverage.toFixed(2)}</span></strong></div>\`;
                
                if (requiredAverage > 5.0) {
                    tableHTML += '<div class="text-danger mt-2"><i class="bi bi-exclamation-triangle me-1"></i>La nota objetivo no es alcanzable.</div>';
                } else if (requiredAverage <= 0) {
                    tableHTML += '<div class="text-success mt-2"><i class="bi bi-check-circle me-1"></i>Ya alcanzaste la nota objetivo.</div>';
                }
                
                tableDiv.innerHTML = tableHTML;
                resultsDiv.style.display = 'block';
            }
            
            function showToast(message, type) {
                const toastHtml = \`
                    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11000;">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">\${type === 'success' ? '✅ Guardado' : type === 'error' ? '❌ Error' : '💡 Info'}</strong>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                \${message}
                            </div>
                        </div>
                    </div>
                \`;
                
                document.body.insertAdjacentHTML('beforeend', toastHtml);
                
                setTimeout(() => {
                    const toastElement = document.querySelector('.toast-container:last-child');
                    if (toastElement) {
                        toastElement.remove();
                    }
                }, 5000);
            }
            
            // Inicialización
            document.addEventListener('DOMContentLoaded', function() {
                updateTotals();
            });
        </script>
    `
}) %> 