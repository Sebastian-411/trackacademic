<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'Mis Calificaciones - Trackademic' %></title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Custom CSS -->
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <!-- Header/Navbar -->
    <%- include('../partials/navbar') %>
    
    <div class="container-fluid py-4">
        <!-- Page Header -->
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-4 border-bottom">
            <h1 class="h2">
                <i class="bi bi-clipboard-data me-2 text-primary"></i>Mis Calificaciones
            </h1>
            <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="exportGrades()">
                        <i class="bi bi-download me-1"></i>Exportar
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="location.reload()">
                        <i class="bi bi-arrow-clockwise me-1"></i>Actualizar
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title mb-1">Total Materias</h5>
                                <h2 class="mb-0"><%= stats.totalSubjects || 0 %></h2>
                            </div>
                            <i class="bi bi-book-fill" style="font-size: 2rem; opacity: 0.8;"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title mb-1">Completadas</h5>
                                <h2 class="mb-0"><%= stats.completedSubjects || 0 %></h2>
                            </div>
                            <i class="bi bi-check-circle-fill" style="font-size: 2rem; opacity: 0.8;"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title mb-1">Promedio General</h5>
                                <h2 class="mb-0"><%= stats.averageGrade ? stats.averageGrade.toFixed(2) : '--' %></h2>
                            </div>
                            <i class="bi bi-graph-up" style="font-size: 2rem; opacity: 0.8;"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-dark">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title mb-1">En Progreso</h5>
                                <h2 class="mb-0"><%= (stats.totalSubjects || 0) - (stats.completedSubjects || 0) %></h2>
                            </div>
                            <i class="bi bi-hourglass-split" style="font-size: 2rem; opacity: 0.8;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <form method="GET" id="filtersForm">
                            <div class="row g-3 align-items-end">
                                <div class="col-md-4">
                                    <label for="semester" class="form-label">
                                        <i class="bi bi-calendar me-1"></i>Semestre
                                    </label>
                                    <select class="form-select" id="semester" name="semester">
                                        <option value="">Todos los semestres</option>
                                        <% if (availableSemesters && availableSemesters.length > 0) { %>
                                            <% availableSemesters.forEach(sem => { %>
                                                <option value="<%= sem %>" <%= selectedSemester === sem ? 'selected' : '' %>><%= sem %></option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                                
                                <div class="col-md-4">
                                    <label for="status" class="form-label">
                                        <i class="bi bi-funnel me-1"></i>Estado
                                    </label>
                                    <select class="form-select" id="status" name="status">
                                        <option value="">Todos los estados</option>
                                        <option value="complete" <%= selectedStatus === 'complete' ? 'selected' : '' %>>Completadas</option>
                                        <option value="in-progress" <%= selectedStatus === 'in-progress' ? 'selected' : '' %>>En progreso</option>
                                        <option value="not-started" <%= selectedStatus === 'not-started' ? 'selected' : '' %>>Sin calificar</option>
                                    </select>
                                </div>
                                
                                <div class="col-md-4">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-funnel me-1"></i>Filtrar
                                        </button>
                                        <a href="/grades" class="btn btn-outline-secondary">
                                            <i class="bi bi-x-circle me-1"></i>Limpiar
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Grades List -->
        <div class="row">
            <div class="col-12">
                <% if (grades && grades.length > 0) { %>
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-list-ul me-2"></i>Calificaciones
                            </h5>
                            <span class="badge bg-primary"><%= grades.length %> materias</span>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Materia</th>
                                            <th class="text-center">Semestre</th>
                                            <th class="text-center">Progreso</th>
                                            <th class="text-center">Nota Actual</th>
                                            <th class="text-center">Nota Final</th>
                                            <th class="text-center">Estado</th>
                                            <th class="text-center">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% grades.forEach(grade => { %>
                                            <%
                                                const completedActivities = grade.activities ? grade.activities.filter(a => a.score !== null).length : 0;
                                                const totalActivities = grade.activities ? grade.activities.length : 0;
                                                const progressPercent = totalActivities > 0 ? Math.round((completedActivities / totalActivities) * 100) : 0;
                                                
                                                const currentGrade = grade.currentGrade || 0;
                                                const finalGrade = grade.finalGrade;
                                                
                                                let statusBadge = '';
                                                let statusText = '';
                                                
                                                if (grade.isComplete) {
                                                    statusBadge = finalGrade >= 3.0 ? 'bg-success' : 'bg-danger';
                                                    statusText = finalGrade >= 3.0 ? 'Aprobada' : 'Reprobada';
                                                } else if (completedActivities > 0) {
                                                    statusBadge = 'bg-warning';
                                                    statusText = 'En progreso';
                                                } else {
                                                    statusBadge = 'bg-secondary';
                                                    statusText = 'Sin calificar';
                                                }
                                            %>
                                            <tr>
                                                <td>
                                                    <div>
                                                        <div class="fw-semibold"><%= grade.subjectCode %></div>
                                                        <small class="text-muted"><%= grade.subjectName || grade.subjectCode %></small>
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <span class="fw-medium"><%= grade.semester %></span>
                                                </td>
                                                <td class="text-center">
                                                    <div class="d-flex align-items-center justify-content-center">
                                                        <div class="progress me-2" style="width: 60px; height: 8px;">
                                                            <div class="progress-bar <%= progressPercent === 100 ? 'bg-success' : 'bg-primary' %>" 
                                                                 style="width: <%= progressPercent %>%;"></div>
                                                        </div>
                                                        <small class="text-muted"><%= completedActivities %>/<%= totalActivities %></small>
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <span class="fw-bold <%= currentGrade >= 3.0 ? 'text-success' : 'text-warning' %>">
                                                        <%= currentGrade.toFixed(2) %>
                                                    </span>
                                                </td>
                                                <td class="text-center">
                                                    <% if (finalGrade !== null && finalGrade !== undefined) { %>
                                                        <span class="fw-bold <%= finalGrade >= 3.0 ? 'text-success' : 'text-danger' %>">
                                                            <%= finalGrade.toFixed(2) %>
                                                        </span>
                                                    <% } else { %>
                                                        <span class="text-muted">--</span>
                                                    <% } %>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge <%= statusBadge %>"><%= statusText %></span>
                                                </td>
                                                <td class="text-center">
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <a href="/grades/<%= grade._id %>" 
                                                           class="btn btn-outline-primary" 
                                                           data-bs-toggle="tooltip" 
                                                           title="Ver detalles">
                                                            <i class="bi bi-eye"></i>
                                                        </a>
                                                        <% if (grade.evaluationPlanId && grade.evaluationPlanId._id) { %>
                                                            <a href="/evaluation-plans/<%= grade.evaluationPlanId._id %>" 
                                                               class="btn btn-outline-info" 
                                                               data-bs-toggle="tooltip" 
                                                               title="Ver plan">
                                                                <i class="bi bi-clipboard-check"></i>
                                                            </a>
                                                        <% } %>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                <% } else { %>
                    <!-- Empty State -->
                    <div class="card">
                        <div class="card-body text-center py-5">
                            <i class="bi bi-clipboard-x text-muted mb-3" style="font-size: 4rem;"></i>
                            <h4 class="text-muted mb-3">No se encontraron calificaciones</h4>
                            <p class="text-muted mb-4">
                                <% if (selectedSemester) { %>
                                    No tienes calificaciones para el semestre seleccionado.
                                <% } else { %>
                                    Aún no tienes calificaciones registradas.
                                <% } %>
                            </p>
                            <% if (selectedSemester) { %>
                                <a href="/grades" class="btn btn-primary">
                                    <i class="bi bi-funnel-fill me-2"></i>Ver Todas las Calificaciones
                                </a>
                            <% } else { %>
                                <a href="/evaluation-plans" class="btn btn-primary">
                                    <i class="bi bi-clipboard-check me-2"></i>Ver Planes de Evaluación
                                </a>
                            <% } %>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Analytics Dashboard (if there are grades) -->
        <% if (grades && grades.length > 0) { %>
            <!-- Performance Overview -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-graph-up me-2"></i>Análisis de Rendimiento Académico
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row" id="performanceAnalysis">
                                <!-- Se generará dinámicamente con JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="row mt-4">
                <!-- Rendimiento por Semestre -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-calendar-week me-2"></i>Progreso por Semestre
                            </h6>
                        </div>
                        <div class="card-body">
                            <canvas id="semesterChart" height="300"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Distribución de Notas -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-bar-chart-steps me-2"></i>Distribución de Notas
                            </h6>
                        </div>
                        <div class="card-body">
                            <canvas id="distributionChart" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Alerts and Recommendations Row -->
            <div class="row">
                <!-- Materias en Riesgo -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-exclamation-triangle me-2"></i>Alertas Académicas
                            </h6>
                        </div>
                        <div class="card-body" id="riskAlerts">
                            <!-- Se generará dinámicamente -->
                        </div>
                    </div>
                </div>

                <!-- Recomendaciones -->
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-lightbulb me-2"></i>Recomendaciones Personalizadas
                            </h6>
                        </div>
                        <div class="card-body" id="recommendations">
                            <!-- Se generará dinámicamente -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Performance Radar Chart -->
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-radar me-2"></i>Radar de Rendimiento por Materia
                            </h6>
                        </div>
                        <div class="card-body">
                            <canvas id="radarChart" height="400"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <!-- Projections Modal -->
    <div class="modal fade" id="projectionsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-graph-up me-2"></i>Proyección de Calificaciones
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="projectionsContent">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Pasar datos del servidor al JavaScript
        const gradesData = <%- JSON.stringify(grades || []) %>;
        const statsData = <%- JSON.stringify(stats || {}) %>;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar gráficos si hay datos
            if (gradesData && gradesData.length > 0) {
                initCharts();
            }
            
            // Auto-submit de filtros
            const selects = document.querySelectorAll('#semester, #status');
            selects.forEach(select => {
                select.addEventListener('change', function() {
                    setTimeout(() => {
                        document.getElementById('filtersForm').submit();
                    }, 100);
                });
            });
            
            // Inicializar tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        function initCharts() {
            // Generar análisis de rendimiento
            generatePerformanceAnalysis();
            
            // Generar alertas y recomendaciones
            generateAlertsAndRecommendations();
            
            // Gráfico de progreso por semestre
            initSemesterChart();
            
            // Gráfico de distribución de notas
            initDistributionChart();
            
            // Gráfico radar de rendimiento
            initRadarChart();
        }

        function generatePerformanceAnalysis() {
            const analysisContainer = document.getElementById('performanceAnalysis');
            
            // Calcular métricas avanzadas
            const totalGrades = gradesData.length;
            const completedGrades = gradesData.filter(g => g.finalGrade !== null && g.finalGrade !== undefined).length;
            const inProgressGrades = gradesData.filter(g => g.currentGrade > 0 && (g.finalGrade === null || g.finalGrade === undefined)).length;
            const notStartedGrades = gradesData.filter(g => g.currentGrade === 0).length;
            
            const averageGrade = gradesData.reduce((sum, g) => sum + (g.currentGrade || 0), 0) / totalGrades;
            const highPerforming = gradesData.filter(g => g.currentGrade >= 4.0).length;
            const atRisk = gradesData.filter(g => g.currentGrade > 0 && g.currentGrade < 3.0).length;
            
            // Tendencia (simulada - en un caso real se calcularía con datos históricos)
            const trend = averageGrade >= 3.5 ? 'positive' : averageGrade >= 3.0 ? 'stable' : 'negative';
            const trendIcon = trend === 'positive' ? 'bi-trend-up text-success' : 
                            trend === 'stable' ? 'bi-dash-circle text-warning' : 'bi-trend-down text-danger';
            const trendText = trend === 'positive' ? 'Tendencia Positiva' : 
                            trend === 'stable' ? 'Tendencia Estable' : 'Tendencia Preocupante';
            
            analysisContainer.innerHTML = `
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-6 fw-bold text-primary">${averageGrade.toFixed(2)}</div>
                        <small class="text-muted">Promedio General</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-6 fw-bold text-success">${highPerforming}</div>
                        <small class="text-muted">Materias Sobresalientes</small>
                        <div class="small text-success">≥ 4.0</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-6 fw-bold text-danger">${atRisk}</div>
                        <small class="text-muted">Materias en Riesgo</small>
                        <div class="small text-danger">< 3.0</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <i class="bi ${trendIcon}" style="font-size: 2rem;"></i>
                        <div class="fw-bold">${trendText}</div>
                        <small class="text-muted">Evolución Académica</small>
                    </div>
                </div>
            `;
        }

        function generateAlertsAndRecommendations() {
            // Generar alertas
            const riskContainer = document.getElementById('riskAlerts');
            const atRiskSubjects = gradesData.filter(g => g.currentGrade > 0 && g.currentGrade < 3.0);
            const notStartedSubjects = gradesData.filter(g => g.currentGrade === 0);
            
            let alertsHTML = '';
            
            if (atRiskSubjects.length > 0) {
                alertsHTML += `
                    <div class="alert alert-danger">
                        <h6><i class="bi bi-exclamation-triangle me-2"></i>Materias en Riesgo (${atRiskSubjects.length})</h6>
                        <ul class="mb-0">
                            ${atRiskSubjects.map(subject => 
                                `<li><strong>${subject.subjectCode}</strong>: ${subject.currentGrade.toFixed(2)} - Necesitas mejorar urgentemente</li>`
                            ).join('')}
                        </ul>
                    </div>
                `;
            }
            
            if (notStartedSubjects.length > 0) {
                alertsHTML += `
                    <div class="alert alert-warning">
                        <h6><i class="bi bi-clock me-2"></i>Sin Actividad (${notStartedSubjects.length})</h6>
                        <ul class="mb-0">
                            ${notStartedSubjects.map(subject => 
                                `<li><strong>${subject.subjectCode}</strong>: No has registrado calificaciones</li>`
                            ).join('')}
                        </ul>
                    </div>
                `;
            }
            
            if (alertsHTML === '') {
                alertsHTML = `
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <strong>¡Excelente!</strong> No tienes materias en riesgo crítico.
                    </div>
                `;
            }
            
            riskContainer.innerHTML = alertsHTML;
            
            // Generar recomendaciones
            const recommendationsContainer = document.getElementById('recommendations');
            const averageGrade = gradesData.reduce((sum, g) => sum + (g.currentGrade || 0), 0) / gradesData.length;
            const completedActivities = gradesData.reduce((sum, g) => {
                const completed = g.activities ? g.activities.filter(a => a.score !== null).length : 0;
                return sum + completed;
            }, 0);
            
            let recommendations = [];
            
            if (averageGrade < 3.0) {
                recommendations.push({
                    icon: 'bi-book',
                    title: 'Refuerza tu Estudio',
                    description: 'Tu promedio está por debajo de 3.0. Considera crear un plan de estudio más estructurado.'
                });
            }
            
            if (atRiskSubjects.length > 0) {
                recommendations.push({
                    icon: 'bi-person-raised-hand',
                    title: 'Busca Ayuda Académica',
                    description: 'Tienes materias en riesgo. Considera buscar tutorías o asesorías académicas.'
                });
            }
            
            if (notStartedSubjects.length > 0) {
                recommendations.push({
                    icon: 'bi-calendar-check',
                    title: 'Organiza tu Tiempo',
                    description: 'Tienes materias sin actividad. Crea un cronograma para ponerte al día.'
                });
            }
            
            if (averageGrade >= 4.0) {
                recommendations.push({
                    icon: 'bi-trophy',
                    title: 'Mantén la Excelencia',
                    description: '¡Excelente rendimiento! Considera ayudar a compañeros o explorar actividades avanzadas.'
                });
            } else if (averageGrade >= 3.5) {
                recommendations.push({
                    icon: 'bi-arrow-up',
                    title: 'Sigue Mejorando',
                    description: 'Buen rendimiento general. Un pequeño esfuerzo extra te llevará a la excelencia.'
                });
            }
            
            if (recommendations.length === 0) {
                recommendations.push({
                    icon: 'bi-check-circle',
                    title: 'Buen Trabajo',
                    description: 'Mantén tu ritmo de estudio actual y sigue monitoreando tu progreso.'
                });
            }
            
            const recommendationsHTML = recommendations.map(rec => `
                <div class="d-flex align-items-start mb-3">
                    <i class="bi ${rec.icon} text-primary me-3 mt-1" style="font-size: 1.2rem;"></i>
                    <div>
                        <h6 class="mb-1">${rec.title}</h6>
                        <p class="text-muted mb-0">${rec.description}</p>
                    </div>
                </div>
            `).join('');
            
            recommendationsContainer.innerHTML = recommendationsHTML;
        }

        function initSemesterChart() {
            const ctx = document.getElementById('semesterChart').getContext('2d');
            
            // Agrupar por semestre
            const semesterData = {};
            gradesData.forEach(grade => {
                const sem = grade.semester;
                if (!semesterData[sem]) {
                    semesterData[sem] = { total: 0, count: 0, grades: [] };
                }
                semesterData[sem].total += grade.currentGrade || 0;
                semesterData[sem].count++;
                semesterData[sem].grades.push(grade.currentGrade || 0);
            });
            
            const semesters = Object.keys(semesterData).sort();
            const averages = semesters.map(sem => semesterData[sem].total / semesterData[sem].count);
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: semesters,
                    datasets: [{
                        label: 'Promedio por Semestre',
                        data: averages,
                        borderColor: 'rgba(54, 162, 235, 1)',
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 5,
                            ticks: {
                                stepSize: 0.5
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        function initDistributionChart() {
            const ctx = document.getElementById('distributionChart').getContext('2d');
            
            // Crear rangos de distribución
            const ranges = {
                'Excelente (4.5-5.0)': 0,
                'Bueno (4.0-4.4)': 0,
                'Satisfactorio (3.5-3.9)': 0,
                'Aceptable (3.0-3.4)': 0,
                'Insuficiente (< 3.0)': 0
            };
            
            gradesData.forEach(grade => {
                const g = grade.currentGrade || 0;
                if (g >= 4.5) ranges['Excelente (4.5-5.0)']++;
                else if (g >= 4.0) ranges['Bueno (4.0-4.4)']++;
                else if (g >= 3.5) ranges['Satisfactorio (3.5-3.9)']++;
                else if (g >= 3.0) ranges['Aceptable (3.0-3.4)']++;
                else ranges['Insuficiente (< 3.0)']++;
            });
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(ranges),
                    datasets: [{
                        data: Object.values(ranges),
                        backgroundColor: [
                            '#28a745', // Verde para excelente
                            '#20c997', // Verde claro para bueno
                            '#ffc107', // Amarillo para satisfactorio
                            '#fd7e14', // Naranja para aceptable
                            '#dc3545'  // Rojo para insuficiente
                        ],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 15,
                                padding: 10
                            }
                        }
                    }
                }
            });
        }

        function initRadarChart() {
            const ctx = document.getElementById('radarChart').getContext('2d');
            
            // Tomar hasta 6 materias para el radar (para evitar sobrecarga visual)
            const subjectsForRadar = gradesData.slice(0, 6);
            
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: subjectsForRadar.map(g => g.subjectCode),
                    datasets: [{
                        label: 'Nota Actual',
                        data: subjectsForRadar.map(g => g.currentGrade || 0),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 5
                    }, {
                        label: 'Meta (3.0)',
                        data: subjectsForRadar.map(() => 3.0),
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        borderDash: [5, 5],
                        pointRadius: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 5,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
        }

        async function showProjections(gradeId) {
            const modal = new bootstrap.Modal(document.getElementById('projectionsModal'));
            const content = document.getElementById('projectionsContent');
            
            // Mostrar modal con loading
            modal.show();
            content.innerHTML = '<div class="text-center">' +
                '<div class="spinner-border text-primary" role="status">' +
                    '<span class="visually-hidden">Cargando...</span>' +
                '</div>' +
                '<p class="mt-2">Calculando proyecciones...</p>' +
            '</div>';
            
            // Simular proyecciones (implementar API real más tarde)
            setTimeout(() => {
                content.innerHTML = '<div class="alert alert-info">' +
                        '<i class="bi bi-info-circle me-2"></i>' +
                        'Funcionalidad de proyecciones en desarrollo.' +
                    '</div>' +
                    '<p>Esta funcionalidad calculará automáticamente qué notas necesitas para aprobar cada materia.</p>';
            }, 1000);
        }

        function exportGrades() {
            alert('Funcionalidad de exportación pendiente de implementación');
            // TODO: Implementar exportación a PDF/Excel
        }
    </script>
</body>
</html> 